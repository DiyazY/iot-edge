---
- name: download kubeedge binaries
  ansible.builtin.shell: 
    cmd: "wget https://github.com/kubeedge/kubeedge/releases/download/v{{kubeedge_version}}/keadm-v{{kubeedge_version}}-linux-{{architecture}}.tar.gz"
    chdir: "/home/{{ansible_user}}/"

- name: download checksum
  ansible.builtin.shell: 
      cmd: "wget https://github.com/kubeedge/kubeedge/releases/download/v{{kubeedge_version}}/checksum_keadm-v{{kubeedge_version}}-linux-{{architecture}}.tar.gz.txt"
      chdir: "/home/{{ansible_user}}/"

- name: cat the checksum
  ansible.builtin.shell: 
      cmd: "cat checksum_keadm-v{{kubeedge_version}}-linux-{{architecture}}.tar.gz.txt"
      chdir: "/home/{{ansible_user}}/"
  register: checksum  

- name: verify checksum
  stat: 
    path: "/home/{{ansible_user}}/keadm-v{{kubeedge_version}}-linux-{{architecture}}.tar.gz"
    checksum_algorithm: sha512
    get_checksum: yes
  register: checksum1   

- name: Fail if checksum is not veified
  ansible.builtin.fail:
    msg: "Whoops! checksum not verified"
  when: checksum.stdout != checksum1.stat.checksum

- name: Unarchive a file 
  ansible.builtin.unarchive:
    src: "/home/{{ansible_user}}/keadm-v{{kubeedge_version}}-linux-{{architecture}}.tar.gz"
    dest: "/home/{{ansible_user}}/"
    remote_src: yes  

- name: Change file permissions
  ansible.builtin.file:
    path: "/home/{{ansible_user}}/keadm-v{{kubeedge_version}}-linux-{{architecture}}/keadm/keadm"
    mode: '0755'

- name: copy binary
  ansible.builtin.copy:
    src: "/home/{{ansible_user}}/keadm-v{{kubeedge_version}}-linux-{{architecture}}/keadm/keadm"
    dest: /usr/local/bin 
    remote_src: yes 
    mode: u+x

- name: Set fact
  become: false
  delegate_to: localhost
  set_fact:
    kubeconfig: "../../.kube/k8s-config" # since installed k8s is prerequisite 
    run_once: true

- name: Getting master's node name (expect of getting only master node's name)
  become: false
  delegate_to: localhost
  command: kubectl get nodes -o jsonpath='{.items[*].metadata.name}' --kubeconfig {{kubeconfig}}
  register: node_name

- name: Untaint the Master Node
  delegate_to: localhost
  become: false
  command: kubectl taint nodes {{node_name.stdout}} node-role.kubernetes.io/control-plane:NoSchedule- --kubeconfig {{kubeconfig}}
  ignore_errors: true

- name: Label nodes
  delegate_to: localhost
  become: false
  command: kubectl label services kubernetes service.edgemesh.kubeedge.io/service-proxy-name="" --kubeconfig {{kubeconfig}}
  ignore_errors: true

- name: Wait for a few seconds
  pause:
    seconds: 30
    
- name: initialize cloudcore
  ansible.builtin.shell: "keadm init --advertise-address={{ansible_host}} --kube-config=/home/{{ansible_user}}/.kube/config --set cloudCore.modules.dynamicController.enable=true" 

- name: Taint the Master Node back
  become: false
  delegate_to: localhost
  command: kubectl taint nodes {{node_name.stdout}}  node-role.kubernetes.io/control-plane:NoSchedule --kubeconfig {{kubeconfig}}
  ignore_errors: true

- name: Wait for a few seconds
  pause:
    seconds: 30

# it seems that new version runs cloudcore as a container
# - name: Copy file with owner and permissions
#   ansible.builtin.copy:
#     src: /etc/kubeedge/cloudcore.service
#     dest: /etc/systemd/system/
#     remote_src: yes

# - name: enable cloudcore
#   ansible.builtin.shell: systemctl enable --now cloudcore
    
# - name: Sleep for 5 seconds and continue with play
#   wait_for:
#     timeout: 5

- name: get TOKEN
  ansible.builtin.shell: "keadm gettoken  --kube-config=/home/{{ansible_user}}/.kube/config"
  register: TOKEN

- debug:
    var: TOKEN.stdout

- name: Setting host facts token
  ansible.builtin.set_fact:  token="{{TOKEN.stdout}}"

- name: cleaning
  shell: |
    sudo rm keadm-*.gz*
    sudo rm *keadm-*.txt*

# - name: generating certs for stream
#   shell: |
#     export CLOUDCOREIPS="{{ansible_host}}"
#     sudo su
#     wget https://raw.githubusercontent.com/kubeedge/kubeedge/master/build/tools/certgen.sh /etc/kubeedge/
#     chmod +x /etc/kubeedge/certgen.sh
#     /etc/kubeedge/certgen.sh stream
#     /etc/kubeedge/certgen.sh genCertAndKey edge

- name: get tunnelport (read the ip addresses of cloud)
  delegate_to: localhost
  shell: kubectl get cm tunnelport -n kubeedge -o yaml --kubeconfig {{kubeconfig}}

- name: fix iptables (in my case this)
  shell: sudo iptables -t nat -A OUTPUT -p tcp --dport 10351 -j DNAT --to 192.168.1.17:10003

# useless because cloudcore runs in a container mode. Read this: https://kubeedge.io/docs/faq/setup/
# - name: adjust clouldcore config
#   shell: |
#     cat << EOF >  /etc/kubeedge/config/cloudcore.yaml
#     cloudStream:
#       enable: true
#       streamPort: 10003
#       tlsStreamCAFile: /etc/kubeedge/ca/streamCA.crt
#       tlsStreamCertFile: /etc/kubeedge/certs/stream.crt
#       tlsStreamPrivateKeyFile: /etc/kubeedge/certs/stream.key
#       tlsTunnelCAFile: /etc/kubeedge/ca/rootCA.crt
#       tlsTunnelCertFile: /etc/kubeedge/certs/server.crt
#       tlsTunnelPrivateKeyFile: /etc/kubeedge/certs/server.key
#       tunnelPort: 10004
#     EOF


# - name: disable kube-proxy on all edge nodes (edge nodes conflict with it)
#   delegate_to: localhost
#   shell: | 
#     # kubectl patch daemonset kube-proxy -n kube-system -p '{"spec": {"template": {"spec": {"affinity": {"nodeAffinity": {"requiredDuringSchedulingIgnoredDuringExecution": {"nodeSelectorTerms": [{"matchExpressions": [{"key": "node-role.kubernetes.io/edge", "operator": "DoesNotExist"}]}]}}}}}}}' --kubeconfig {{kubeconfig}} 
# kubectl patch daemonset kube-proxy -n kube-system -p '{"spec": {"template": {"spec": {"affinity": null}}}}' ## revert action
  

# disabling flannel and other things on edge nodes
# kubectl edit ds  kube-flannel-ds -n kube-flannel
# change afinity
# requiredDuringSchedulingIgnoredDuringExecution:
#             nodeSelectorTerms:
#             - matchExpressions:
#               - key: kubernetes.io/os
#                 operator: In
#                 values:
#                 - linux
#               - key: node-role.kubernetes.io/edge
#                 operator: DoesNotExist
#               - key: node-role.kubernetes.io/agent
#                 operator: DoesNotExist