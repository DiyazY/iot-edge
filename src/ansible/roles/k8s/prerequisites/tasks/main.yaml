---
- name: Update and upgrade apt packages
  become: true
  apt:
    upgrade: yes
    # update_cache: yes

- name: Install common Dependencies
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  with_items:
    - curl
    - apt-transport-https 
    - ca-certificates
    - gnupg

- name: Download docker keyring
  ansible.builtin.shell: |
    sudo install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod a+r /etc/apt/keyrings/docker.gpg
  changed_when: true

- name: Add the repository to Apt sources
  shell: |
    UBUNTU_CODENAME=$( \
    (grep DISTRIB_CODENAME /etc/upstream-release/lsb-release || \
      grep DISTRIB_CODENAME /etc/lsb-release) 2>/dev/null | \
    cut -d'=' -f2 )
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "$UBUNTU_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update

- name: install docker
  shell: |
    sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

- name: "Enable and check Docker service"
  become: true
  systemd:
    name: docker
    daemon_reload: yes
    state: restarted
    enabled: yes

- name: "Add Kubernetes Signing Key"
  shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  # curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes.gpg

- name: "Add Software Repository"
  shell: |
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list


# - name: "Add Software Repositories to arm machines"
#   shell: |
#     echo "deb [arch=arm64 signed-by=/etc/apt/keyrings/kubernetes.gpg] http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list
#   when: ansible_facts.architecture == "aarch64"

# - name: "Add Software Repositories to x86_64"
#   shell: |
#     echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/kubernetes.gpg] http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list
#   when: ansible_facts.architecture == "x86_64"
  
- name: Update and upgrade apt packages
  become: true
  apt:
    upgrade: yes
    # update_cache: yes

- name: Install k8s tools
  shell: |
    sudo apt install kubeadm kubelet kubectl -y
  # sudo apt-mark hold kubeadm kubelet kubectl

- name: Disable swap
  become: true
  shell: |
    sudo swapoff -a
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab


- name: Configure /etc/modules-load.d/containerd.conf file
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/containerd.conf
    create: yes
    insertafter: EOF
    line: |
      overlay
      br_netfilter

- name: add modules
  shell: |
    sudo modprobe overlay
    sudo modprobe br_netfilter

- name: Configure /etc/sysctl.d/kubernetes.conf file
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/kubernetes.conf
    create: yes
    insertafter: EOF
    line: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1

- name: reload sysctl
  shell: |
    sudo sysctl --system

- name: Name master node
  shell: |
    sudo hostnamectl set-hostname master
  when: inventory_hostname == groups['master'][0]

- name: Name worker node_1
  shell: |
    sudo hostnamectl set-hostname node_1
  when: inventory_hostname == groups['node'][0]

- name: Name worker node_2
  shell: |
    sudo hostnamectl set-hostname node_2
  when: inventory_hostname == groups['node'][1]

- name: Name worker node_3
  shell: |
    sudo hostnamectl set-hostname node_3
  when: inventory_hostname == groups['node'][2]
  

- name: Configure /etc/hosts file
  ansible.builtin.lineinfile:
    path: /etc/hosts
    insertafter: EOF
    line: |
      192.168.1.106 master
      192.168.1.100 node_1
      192.168.1.102 node_2
      192.168.1.101 node_3


