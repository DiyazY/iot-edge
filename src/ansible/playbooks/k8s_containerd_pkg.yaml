# k8s_containrd_pkg.yml
---
- hosts: "master:node"
  remote_user: d-user
  become: true
  become_method: sudo
  become_user: root
  gather_facts: true
  
  tasks:
   
   - name: Make the Swap inactive
     command: swapoff -a

   - name: Remove Swap entry from /etc/fstab.
     lineinfile:
       dest: /etc/fstab
       regexp: swap
       state: absent

   - name: Create a empty file for containerd module.
     copy:
       content: ""
       dest: /etc/modules-load.d/containerd.conf
       force: no

   - name: Configure module for containerd.
     blockinfile:
       path: /etc/modules-load.d/containerd.conf 
       block: |
            overlay
            br_netfilter

   - name: Create a empty file for kubernetes sysctl params.
     copy:
       content: ""
       dest: /etc/sysctl.d/99-kubernetes-cri.conf
       force: no

   - name: Configure sysctl params for Kubernetes.
     lineinfile:
       path: /etc/sysctl.d/99-kubernetes-cri.conf 
       line: "{{ item }}"
     with_items:
       - 'net.bridge.bridge-nf-call-iptables  = 1'
       - 'net.ipv4.ip_forward                 = 1'
       - 'net.bridge.bridge-nf-call-ip6tables = 1'

   - name: Apply sysctl params without reboot.
     command: sysctl --system

   - name: Installing Prerequisites for Kubernetes
     apt: 
       name:
         - apt-transport-https
         - ca-certificates
         - curl
         - gnupg-agent
         - vim
         - software-properties-common
       state: present

  #  - name: Add Dockerâ€™s official GPG key
  #    apt_key:
  #      url: https://download.docker.com/linux/ubuntu/gpg
  #      state: present
   - name: Download docker keyring
     ansible.builtin.shell: |
        cd /usr/share/keyrings/
        wget https://download.docker.com/linux/ubuntu/gpg
        gpg --dearmor -o /usr/share/keyrings/docker.gpg --yes /usr/share/keyrings/gpg
        chmod a+r /usr/share/keyrings/docker.gpg
     changed_when: true

   - name: Add Docker Repository to x86_64
     apt_repository:
       repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
       state: present
       filename: docker
       update_cache: yes
     when: ansible_facts.architecture == "x86_64"

   - name: Add Docker Repository to arm
     apt_repository:
       repo: deb [arch=arm64] https://download.docker.com/linux/ubuntu jammy stable
       state: present
       filename: docker
       update_cache: yes
     when: ansible_facts.architecture == "aarch64"

   - name: Install containerd.
     apt: 
       name:
         - containerd.io
       state: present

   - name: Configure containerd.
     file:
       path: /etc/containerd
       state: directory

   - name: Configure containerd.
     shell: /usr/bin/containerd config default > /etc/containerd/config.toml

   - name: Enable containerd service, and start it.
     systemd: 
       name: containerd
       state: restarted
       enabled: yes
       daemon-reload: yes

  #  - name: Add Google official GPG key
  #    apt_key:
  #      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
  #      state: present

  #  - name: Add Kubernetes Repository
  #    apt_repository:
  #      repo: deb http://apt.kubernetes.io/ kubernetes-xenial main 
  #      state: present
  #      filename: kubernetes
  #      mode: 0600

   - name: Downloading Kubernetes archive keyring
     ansible.builtin.get_url:
      url: https://pkgs.k8s.io/core:/stable:/{{k8s_version}}/deb/Release.key
      dest: /usr/share/keyrings/kubernetes-archive-keyring.asc
      mode: '0755'

   - name: Adding kubernetes repository
     ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.asc] https://pkgs.k8s.io/core:/stable:/{{k8s_version}}/deb/ /"
        state: present
        filename: kubernetes

   - name: Installing Kubernetes Cluster Packages.
     apt: 
       name:
         - kubeadm
         - kubectl
         - kubelet
       state: present

   - name: Enable service kubelet, and enable persistently
     service: 
       name: kubelet
       enabled: yes

   - name: Reboot all the kubernetes nodes.
     reboot:
       post_reboot_delay: 60
       reboot_timeout: 80
       connect_timeout: 300
       test_command: uptime
...
